void AdjustDown(HPDataType* a, int size, int parent)
{
	int child = parent * 2 + 1;
	while (child < size)
	{
		if (child +1 < size && a[child] > a[child + 1])
		{
			child++;
		}

		if (a[child] < a[parent])
		{
			Swap(&a[child], &a[parent]);
			parent = child;
			child = parent * 2 + 1;
		}
		else
		{
			break;
		}
	}
}

void PrintTopK(int* a, int n, int k)
{
	//1. Build a heap -- build a heap with the first k elements in a
	int* kMineHeap = (int*)malloc(sizeof(int) * k);
	assert(kMineHeap);
	for (int i = 0; i < k; i++)
	{
		kMineHeap[i] = a[i];
	}
	for (int i = (k - 1 - 1) / 2; i >= 0; i--)
	{
		AdjustDown(kMineHeap, k, i);
	}
	//2. Exchange the remaining n-k elements with the elements at the top of the heap in turn, and replace them if they are not satisfied
	for (int j = k; j < n; j++)
	{
		if (a[j] > kMineHeap[0])
		{
			kMineHeap[0] = a[j];
			AdjustDown(kMineHeap, k, 0);
		}
	}
	for (int i = 0; i < k; i++)
	{
		printf("%d ", kMineHeap[i]);
	}
	printf("\n");
}
